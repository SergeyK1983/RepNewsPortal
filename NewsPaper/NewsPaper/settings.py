"""
Django settings for NewsPaper project.

Generated by 'django-admin startproject' using Django 4.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-yfzrw7x^)33qy2t&jd#!ei#g7(+2l5abd_-z9vz%l(1&ux@@d%'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True  # В боевом режиме поставить на False, чтобы не видеть отладочную инфу при ошибках
# при DEBUG=False django как-то меняет обращение к статическим файлам (каталоги static/), надо переопределить
# переменную STATICFILES_DIRS

ALLOWED_HOSTS = ['127.0.0.1']  # Тут наш сайт: www:something.ru или IP адрес, пока ХЗ.


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    # для создания аккаунта
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.google',
    'allauth.socialaccount.providers.yandex',  # http://127.0.0.1:8000/accounts/yandex/login/callback/

    'django.contrib.sites',  # Для простых страничек
    'django.contrib.flatpages',  # Для простых страничек

    'django_celery_beat',  # Для периодических задач

    'django_filters',  # django фильтры, из добавленной библиотеки ‘django_filters’

    'news.apps.NewsConfig',
    'accounts.apps.AccountsConfig',
]

DEFAULT_FROM_EMAIL = 'ssp-serg@yandex.ru'  # здесь указываем уже свою ПОЛНУЮ почту, с которой будут отправляться письма
SERVER_EMAIL = 'ssp-serg@yandex.ru'

ADMINS = (
    ('admin', 'ksm.serg1983@gmail.com'),
)

CELERY_BEAT_SCHEDULER = 'django_celery_beat.schedulers:DatabaseScheduler'  # тем самым указав Celery использовать новый планировщик задач

CELERY_BROKER_URL = 'redis://localhost:6379'
CELERY_RESULT_BACKEND = 'redis://localhost:6379'
CELERY_ACCEPT_CONTENT = ['application/json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
# celery -A NewsPaper worker -l INFO - команда на посмотреть

SITE_ID = 1

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',

    'django.contrib.flatpages.middleware.FlatpageFallbackMiddleware',

    'allauth.account.middleware.AccountMiddleware',
]

ROOT_URLCONF = 'NewsPaper.urls'

AUTHENTICATION_BACKENDS = [
    # Нужно войти по имени пользователя в Django admin, независимо от `allauth`
    'django.contrib.auth.backends.ModelBackend',
    # `allauth` специфические методы аутентификации, такие как логин по электронной почте
    'allauth.account.auth_backends.AuthenticationBackend',
]

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

LOGIN_URL = '/account/login/'
# LOGIN_REDIRECT_URL = "/account/profile/"  # Установить ссылку перехода после входа в систему
# LOGIN_REDIRECT_URL = "https://oauth.yandex.ru/verification_code"
# LOGIN_REDIRECT_URL = "/"
LOGIN_REDIRECT_URL = "login_redirect_url"
# ACCOUNT_LOGOUT_REDIRECT_URL = "/"  # Установить ссылку перехода после выхода из системы

# Настройки для верификации
ACCOUNT_EMAIL_REQUIRED = True  # email является обязательным
ACCOUNT_UNIQUE_EMAIL = True  # email является уникальным
ACCOUNT_USERNAME_REQUIRED = True  # False username теперь необязательный.
ACCOUNT_AUTHENTICATION_METHOD = 'email'  # аутентификация будет происходить посредством электронной почты
ACCOUNT_EMAIL_VERIFICATION = 'none'  # 'none' верификация почты отсутствует  /"mandatory"

# Чтобы allauth распознал нашу форму как ту, что должна выполняться вместо формы по умолчанию
# нужно чтобы зарегистрированный пользователь сразу добавлялся в нужную группу
ACCOUNT_FORMS = {'signup': 'accounts.forms.BasicSignupForm'}

WSGI_APPLICATION = 'NewsPaper.wsgi.application'

# Кэширование через файловую систему.
# Добавляем словарь (см. документацию).
CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.filebased.FileBasedCache',
        'LOCATION': os.path.join(BASE_DIR, 'cache_files'),  # Указываем, куда будем сохранять кэшируемые файлы! Не забываем создать папку cache_files внутри папки с manage.py!
    }
}

# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

# Если вы попытаетесь получить доступ к базе данных, которую вы не определили в своих DATABASES настройках,
# Django вызовет django.utils.connection.ConnectionDoesNotExist исключение
# ./manage.py migrate --database=users
DATABASES = {
    'users': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'db.newspaper',
        'USER': 'SergNews',
        'PASSWORD': 'qwer',
        'HOST': 'localhost',
        'PORT': '5433'
    },
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
     }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'ru'  # 'en-us' Теперь на русском языке

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = False  # True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = '/static/'  # название папки в пути для статических файлов, префикс URL-адреса
STATIC_ROOT = os.path.join(BASE_DIR, 'static')  # путь к общей папке static, используемой реальным веб-сервером
STATICFILES_DIRS = []  # [BASE_DIR / 'static']  # список путей для нестандартных папок static

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# Личную информацию (адрес и пароль электронной почты, секретный ключ Django и прочее)
# можно и нужно хранить в переменных окружения и при запуске сервера загружать с помощью модуля python-dotenv
EMAIL_HOST = 'smtp.yandex.ru'
EMAIL_PORT = 465
EMAIL_HOST_USER = 'ssp-serg'  # ваше имя пользователя
EMAIL_HOST_PASSWORD = ''  # пароль от почты
EMAIL_USE_SSL = True  # Яндекс использует ssl

# EMAIL_BACKEND = "django.core.mail.backends.filebased.EmailBackend"

# Логирование
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,  # Не отключаем имеющиеся логеры
    'formatters': {
        'console_debug': {
            'format': '{asctime} - {levelname} - {message}',  # в консоль: время, уровень сообщения, сообщения
            'style': '{',  # Чтобы django не матерился на {} в названии
        },
        'console_warning': {
            'format': '{asctime} - {levelname} - {pathname} - {message}',  # в консоль: время, уровень сообщения, путь к источнику события, сообщения
            'style': '{',
        },
        'console_error': {
            'format': '{asctime} - {levelname} - {pathname} - {exc_info} - {message}',  # в консоль: время, уровень сообщения, путь к источнику события, стэк ошибки, сообщения
            'style': '{',
        },
        'general_log_info': {
            'format': '{asctime} - {levelname} - {module} - {message}',  # уровня INFO и выше только с указанием времени, уровня логирования, модуля, сообщение
            'style': '{',
        },
        'error_log': {
            'format': '{asctime} - {levelname} - {pathname} - {exc_info} - {message}',  # время, уровень логирования, само сообщение, путь к источнику сообщения и стэк ошибки
            'style': '{',
        },
        'security_log': {
            'format': '{asctime} - {levelname} - {module} - {message}',  # время, уровень логирования, модуль и сообщение (из логгера django.security)
            'style': '{',
        },
        'mail_error': {
            'format': '{asctime} - {levelname} - {pathname} - {message}',  # из django.request и django.server по формату, как в errors.log, но без стэка ошибок.
            'style': '{',
        },
    },
    'filters': {
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',  # фильтр, который пропускает записи только в случае, когда DEBUG = True
        },
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse',  # фильтр, который пропускает записи только в случае, когда DEBUG = False
        },
    },
    # Обработчики
    'handlers': {
        'console-debug': {
            'level': 'DEBUG',
            'filters': ['require_debug_true'],
            'class': 'logging.StreamHandler',  # для вывода в консоль
            'formatter': 'console_debug',
        },
        'console-warning': {
            'level': 'WARNING',
            'filters': ['require_debug_true'],
            'class': 'logging.StreamHandler',
            'formatter': 'console_warning',
        },
        'console-error': {
            'level': 'ERROR',
            'filters': ['require_debug_true'],
            'class': 'logging.StreamHandler',
            'formatter': 'console_error',
        },
        'file_general.log': {
            'level': 'INFO',
            'filters': ['require_debug_false'],
            'class': 'logging.FileHandler',
            'filename': BASE_DIR / 'general.log',
            'formatter': 'general_log_info',
        },
        'file_errors.log': {
            'level': 'ERROR',
            'class': 'logging.FileHandler',
            'filename': BASE_DIR / 'errors.log',
            'formatter': 'error_log',
        },
        'file_security.log': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': BASE_DIR / 'security.log',
            'formatter': 'security_log',
        },
        'mail_admins': {
            'level': 'ERROR',
            'filters': ['require_debug_false'],
            'class': 'django.utils.log.AdminEmailHandler',
            'formatter': 'mail_error',
            'include_html': True,
        }
    },
    'loggers': {
        # Логгер верхнего уровня, который принимает все сообщения, но непосредственно в него ничего не записывается.
        # Все сообщения, поступающие в него распределяются по дочерним логгерам.
        'django': {
            'handlers': ['console-debug', 'console-warning', 'console-error', 'file_general.log'],
            # 'level': 'INFO',
            'propagate': True,
        },
        # Логгер, принимающий все сообщения, связанные с ошибками обработки запроса.
        'django.request': {
            'handlers': ['file_errors.log', 'mail_admins'],
            'level': "ERROR",
            'propagate': False,  # False для того, чтобы логгер верхнего уровня не дублировал информацию
        },
        # Логгер, регистрирующий сообщения, возникающие на этапе вызова команды runserver.
        # Ответы HTTP 5XX регистрируются как сообщения ОБ ОШИБКЕ, ответы 4XX регистрируются
        # как предупреждающие сообщения, а все остальное регистрируется как INFO.
        'django.server': {
            'handlers': ['file_errors.log', 'mail_admins'],
            'propagate': True,
        },
        # Логгер, Журнал сообщений, связанных с рендерингом шаблонов.
        'django.template': {
            'handlers': ['file_errors.log'],
            'propagate': False,
        },
        # Сообщения, попадающие в этот логгер, относятся к взаимодействию приложения с базой данных.
        # Ошибки в моделях, взаимодействии с ними, миграциях и т. д.
        # Например, каждый оператор SQL прикладного уровня, выполняемый запросом, регистрируется
        # на уровне DEBUG в этом регистраторе.
        'django.db.backends': {
            'handlers': ['file_errors.log'],
            'propagate': False,
        },
        # Определяет класс логгеров, регистрирующих события нарушения безопасности.
        'django.security': {
            'handlers': ['file_security.log'],
            'propagate': False,
        },
    },
}

